# PostgreSQL Configuration for Flavorio
user=postgres.eysnqwxgrsspbnkkosoq 
password=Unfitted6-Outsider-Dividable-Trickery-Wrinkly-Helium-Affluent-Providing-Garland-Outshine
host=aws-0-eu-west-2.pooler.supabase.com
port=6543
dbname=postgres

# Update the password above with your actual PostgreSQL password
# Then update your config.py to use these environment variables
# Microsoft 365 Email Configuration for HomeGrubHub
# Copy these settings to your .env file and configure with your Azure Application credentials

# ===== MICROSOFT GRAPH API CONFIGURATION (RECOMMENDED) =====
# Application (client) permissions for secure server-to-server email sending

# Azure AD Tenant ID (found in Azure Portal > Azure Active Directory > Overview)
OFFICE365_TENANT_ID=407fb862-894e-4651-8a1b-54902f6d9b18

# Azure AD Application (client) ID (from your registered app)
OFFICE365_CLIENT_ID=13fad9b6-0b36-4461-a568-90e1b9f99adf

# Azure AD Application client secret (generated from your app registration)
OFFICE365_CLIENT_SECRET=kaL8Q~yUzLlpLAVla_hnjxi4FYmqdI2K4jwZsacX

# ===== SMTP CONFIGURATION (FALLBACK) =====
# Used as backup if Graph API is not available

# Your Microsoft 365 email account credentials
OFFICE365_EMAIL=support@homegrubhub.co.uk
OFFICE365_PASSWORD=htzjyhhzrfztsshz

# ===== EMAIL ADDRESSES =====
# These are automatically configured but can be overridden if needed

# The email address that sends support emails
SUPPORT_FROM_EMAIL=support@homegrubhub.co.uk

# The email address that receives support requests
SUPPORT_TO_EMAIL=contact@homegrubhub.co.uk

# ===== AZURE APPLICATION SETUP INSTRUCTIONS =====

# 1. Register Application in Azure Portal:
#    - Go to Azure Portal > Azure Active Directory > App registrations
#    - Click "New registration"
#    - Name: "HomeGrubHub Email Service"
#    - Account types: "Accounts in this organizational directory only"
#    - Redirect URI: Leave blank for server applications
#    - Click "Register"

# 2. Configure Application Permissions:
#    - Go to your app > API permissions
#    - Click "Add a permission" > Microsoft Graph > Application permissions
#    - Search and add: "Mail.Send"
#    - Click "Grant admin consent for [your organization]"

# 3. Create Client Secret:
#    - Go to your app > Certificates & secrets
#    - Click "New client secret"
#    - Description: "HomeGrubHub Production"
#    - Expires: Choose appropriate duration (12-24 months recommended)
#    - Copy the generated secret value (you won't see it again!)

# 4. Get Required IDs:
#    - Tenant ID: Azure Portal > Azure Active Directory > Overview > Tenant ID
#    - Client ID: Your app registration > Overview > Application (client) ID

# 5. Configure Environment Variables:
#    - Set OFFICE365_TENANT_ID to your Tenant ID
#    - Set OFFICE365_CLIENT_ID to your Application (client) ID  
#    - Set OFFICE365_CLIENT_SECRET to your generated client secret

# ===== SECURITY BEST PRACTICES =====
# - Use Application permissions (not delegated) for server applications
# - Restrict permissions to only Mail.Send (principle of least privilege)
# - Use Azure Key Vault for production secret storage
# - Regularly rotate client secrets (set expiration reminders)
# - Monitor Azure AD sign-in logs for your application
# - Never commit secrets to version control

# ===== TESTING =====
# After configuration, test your setup:
# 1. Start your Flask application
# 2. Log in as an admin user
# 3. Visit: http://your-domain/support/email-admin
# 4. Run configuration test to verify Graph API connection
# 5. Send a test email to confirm functionality

# ===== TROUBLESHOOTING =====
# Common issues:
# - "Insufficient privileges": Admin consent not granted for Mail.Send permission
# - "Invalid client": Check client ID and tenant ID are correct
# - "Invalid client secret": Secret may have expired or be incorrect
# - "Forbidden": Application may need Mail.Send permission on the specific mailbox


SENDGRID_API_KEY=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
SENDGRID_FROM_EMAIL=noreply@homegrubhub.co.uk
SENDGRID_FROM_NAME=HomeGrubHub