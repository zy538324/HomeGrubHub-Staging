import os
import sys
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_bootstrap import Bootstrap
from jinja2 import FileSystemLoader, ChoiceLoader
import flask_bootstrap
from config import Config
from auth0_config import (
        AUTH0_CLIENT_ID, AUTH0_CLIENT_SECRET, AUTH0_DOMAIN, AUTH0_CALLBACK_URL
    )
from authlib.integrations.flask_client import OAuth

# Adjust sys.path to include the parent directory
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

db = SQLAlchemy()
login_manager = LoginManager()
bootstrap = Bootstrap()
oauth = OAuth()

def create_app():
    # Get the path to the project root directory (parent of recipe_app)
    project_root_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    recipe_app_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    template_dir = os.path.join(recipe_app_dir, 'templates')
    static_dir = os.path.join(recipe_app_dir, 'static')
    
    app = Flask(__name__, template_folder=template_dir, static_folder=static_dir)
    app.config.from_object(Config)
    
    # Add Flask-Bootstrap templates to the loader
    bootstrap_template_dir = os.path.join(os.path.dirname(flask_bootstrap.__file__), 'templates')
    app.jinja_loader = ChoiceLoader([
        FileSystemLoader(template_dir),  # Your custom templates
        FileSystemLoader(bootstrap_template_dir)  # Flask-Bootstrap templates
    ])
    app.config['SECRET_KEY'] = 'you-will-never-guess'
    app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{os.path.join(project_root_dir, "instance", "recipes.db")}'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

    db.init_app(app)
    login_manager.init_app(app)
    bootstrap.init_app(app)
    oauth.init_app(app)
    login_manager.login_view = 'main.login'
    login_manager.login_message = 'Please log in to access this page.'
    login_manager.login_message_category = 'info'

    app.auth0 = oauth.register(
        'auth0',
        client_id=AUTH0_CLIENT_ID,
        client_secret=AUTH0_CLIENT_SECRET,
        api_base_url='https://' + AUTH0_DOMAIN,
        access_token_url='https://' + AUTH0_DOMAIN + '/oauth/token',
        authorize_url='https://' + AUTH0_DOMAIN + '/authorize',
        client_kwargs={
            'scope': 'openid profile email',
        },
    )

    from .routes import main_bp
    app.register_blueprint(main_bp)
    
    from .admin_routes import admin_bp
    app.register_blueprint(admin_bp)
    
    from .billing import billing_bp
    app.register_blueprint(billing_bp)

    from auth_routes import auth_bp
    app.register_blueprint(auth_bp)
    
    # Register new feature blueprints
    try:
        from ..meal_planning_routes import meal_planning_bp
        app.register_blueprint(meal_planning_bp)
    except ImportError as e:
        print(f"Warning: Could not import meal_planning_bp: {e}")
    
    try:
        from ..community_routes import community_bp
        app.register_blueprint(community_bp)
    except ImportError as e:
        print(f"Warning: Could not import community_bp: {e}")
    
    try:
        from ..admin_moderation_routes import admin_moderation_bp
        app.register_blueprint(admin_moderation_bp)
    except ImportError as e:
        print(f"Warning: Could not import admin_moderation_bp: {e}")

    from .models import User

    @login_manager.user_loader
    def load_user(user_id):
        return User.query.get(int(user_id))

    with app.app_context():
        db.create_all()
        # Removed test users Lisa, Matt, Sienna, and Matt.Admin

    print(f"Database URI: {app.config['SQLALCHEMY_DATABASE_URI']}")  # Log the database URI for debugging
    print(f"Resolved Database Path: {os.path.join(project_root_dir, 'instance', 'recipes.db')}")  # Log the resolved database path
    print(f"Current Working Directory: {os.getcwd()}")  # Log the current working directory

    return app
